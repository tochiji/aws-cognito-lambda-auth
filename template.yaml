AWSTemplateFormatVersion: 2010-09-09
Description: >-
  aws_cognito_lambda_auth

Transform:
  - AWS::Serverless-2016-10-31

Globals:
  Api:
    OpenApiVersion: 3.0.3

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-all-items.js
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs16.x
      Architectures:
        - arm64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref ApiGateway

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-by-id.js
  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-by-id.getByIdHandler
      Runtime: nodejs16.x
      Architectures:
        - arm64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            Method: GET
            RestApiId: !Ref ApiGateway

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-item.js
  putItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-item.putItemHandler
      Runtime: nodejs16.x
      Architectures:
        - arm64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST
            RestApiId: !Ref ApiGateway

  createUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/create-user.handler
      Runtime: nodejs16.x
      Architectures:
        - arm64
      MemorySize: 128
      Timeout: 100
      Description: Cognitoにユーザーを新規作成します
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Environment:
        Variables:
          CLIENT_ID: !Ref CognitoUserPoolClient
      Events:
        Api:
          Type: Api
          Properties:
            Path: /auth/create-user
            Method: POST
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: NONE

  confirmSignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/confirm-signup.handler
      Runtime: nodejs16.x
      Architectures:
        - arm64
      MemorySize: 128
      Timeout: 100
      Description: Cognitoに新規登録したユーザーに送られるConfirmation Codeを検証します
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Environment:
        Variables:
          CLIENT_ID: !Ref CognitoUserPoolClient
      Events:
        Api:
          Type: Api
          Properties:
            Path: /auth/confirm-signup
            Method: POST
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: NONE

  resendConfirmationCodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/resend-confirmation-code.handler
      Runtime: nodejs16.x
      Architectures:
        - arm64
      MemorySize: 128
      Timeout: 100
      Description: Confirmation Codeを再送します
      Environment:
        Variables:
          CLIENT_ID: !Ref CognitoUserPoolClient
      Events:
        Api:
          Type: Api
          Properties:
            Path: /auth/resend-confirmation-code
            Method: POST
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: NONE

  initiateAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/initiate-auth.handler
      Runtime: nodejs16.x
      Architectures:
        - arm64
      MemorySize: 128
      Timeout: 100
      Description: Emailとパスワードでユーザーを認証します
      Environment:
        Variables:
          CLIENT_ID: !Ref CognitoUserPoolClient
      Events:
        Api:
          Type: Api
          Properties:
            Path: /auth/initiate-auth
            Method: POST
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: NONE

  verifyIdTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/verify-id-token.handler
      Runtime: nodejs16.x
      Architectures:
        - arm64
      MemorySize: 128
      Timeout: 100
      Description: IDトークンを検証します
      Environment:
        Variables:
          USERPOOL_ID: !Ref CognitoUserPool
          CLIENT_ID: !Ref CognitoUserPoolClient
      Events:
        Api:
          Type: Api
          Properties:
            Path: /auth/verify-id-token
            Method: POST
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: NONE

  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  SampleTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: sam-cognito-userpool
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate:
          - email

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: sam-cognito-userpool-client
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
